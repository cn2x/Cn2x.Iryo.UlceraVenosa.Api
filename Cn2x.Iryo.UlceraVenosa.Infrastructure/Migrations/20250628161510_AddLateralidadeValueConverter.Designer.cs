// <auto-generated />
using System;
using Cn2x.Iryo.UlceraVenosa.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Cn2x.Iryo.UlceraVenosa.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250628161510_AddLateralidadeValueConverter")]
    partial class AddLateralidadeValueConverter
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Cn2x.Iryo.UlceraVenosa.Domain.Entities.Anatomica", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("AtualizadoEm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Desativada")
                        .HasColumnType("boolean");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.ToTable("Anatomicas");
                });

            modelBuilder.Entity("Cn2x.Iryo.UlceraVenosa.Domain.Entities.Avaliacao", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("AtualizadoEm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Conduta")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataAvaliacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Desativada")
                        .HasColumnType("boolean");

                    b.Property<string>("Diagnostico")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Observacoes")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<Guid>("PacienteId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PacienteId");

                    b.ToTable("Avaliacoes");
                });

            modelBuilder.Entity("Cn2x.Iryo.UlceraVenosa.Domain.Entities.Ceap", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AnatomiaId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("AtualizadoEm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ClasseClinicaId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Desativada")
                        .HasColumnType("boolean");

                    b.Property<Guid>("EtiologiaId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PatofisiologiaId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UlceraId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AnatomiaId");

                    b.HasIndex("ClasseClinicaId");

                    b.HasIndex("EtiologiaId");

                    b.HasIndex("PatofisiologiaId");

                    b.HasIndex("UlceraId")
                        .IsUnique();

                    b.ToTable("Ceaps");
                });

            modelBuilder.Entity("Cn2x.Iryo.UlceraVenosa.Domain.Entities.Clinica", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("AtualizadoEm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Desativada")
                        .HasColumnType("boolean");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.ToTable("Clinicas");
                });

            modelBuilder.Entity("Cn2x.Iryo.UlceraVenosa.Domain.Entities.Etiologica", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("AtualizadoEm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Desativada")
                        .HasColumnType("boolean");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.ToTable("Etiologicas");
                });

            modelBuilder.Entity("Cn2x.Iryo.UlceraVenosa.Domain.Entities.Exsudato", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("AtualizadoEm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Desativada")
                        .HasColumnType("boolean");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<Guid>("ExsudatoTipoId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UlceraId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ExsudatoTipoId");

                    b.HasIndex("UlceraId");

                    b.ToTable("Exsudatos");
                });

            modelBuilder.Entity("Cn2x.Iryo.UlceraVenosa.Domain.Entities.ExsudatoTipo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("AtualizadoEm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Desativada")
                        .HasColumnType("boolean");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.ToTable("ExsudatoTipos");
                });

            modelBuilder.Entity("Cn2x.Iryo.UlceraVenosa.Domain.Entities.ImagemUlcera", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("AtualizadoEm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CaminhoArquivo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataCaptura")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Desativada")
                        .HasColumnType("boolean");

                    b.Property<string>("Descricao")
                        .HasColumnType("text");

                    b.Property<bool>("EhImagemPrincipal")
                        .HasColumnType("boolean");

                    b.Property<string>("NomeArquivo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Observacoes")
                        .HasColumnType("text");

                    b.Property<int>("OrdemExibicao")
                        .HasColumnType("integer");

                    b.Property<long>("TamanhoBytes")
                        .HasColumnType("bigint");

                    b.Property<Guid>("UlceraId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UlceraId");

                    b.ToTable("ImagemUlcera");
                });

            modelBuilder.Entity("Cn2x.Iryo.UlceraVenosa.Domain.Entities.Paciente", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("AtualizadoEm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("character varying(14)");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Desativada")
                        .HasColumnType("boolean");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("Cpf")
                        .IsUnique();

                    b.ToTable("Pacientes");
                });

            modelBuilder.Entity("Cn2x.Iryo.UlceraVenosa.Domain.Entities.Patofisiologica", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("AtualizadoEm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Desativada")
                        .HasColumnType("boolean");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.ToTable("Fisiologicas");
                });

            modelBuilder.Entity("Cn2x.Iryo.UlceraVenosa.Domain.Entities.RegiaoAnatomica", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("AtualizadoEm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Desativada")
                        .HasColumnType("boolean");

                    b.Property<string>("Limites")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<Guid>("SegmentoId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SegmentoId");

                    b.ToTable("RegioesAnatomicas");
                });

            modelBuilder.Entity("Cn2x.Iryo.UlceraVenosa.Domain.Entities.Segmento", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("AtualizadoEm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Desativada")
                        .HasColumnType("boolean");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Segmentos");
                });

            modelBuilder.Entity("Cn2x.Iryo.UlceraVenosa.Domain.Entities.Topografia", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("AtualizadoEm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Desativada")
                        .HasColumnType("boolean");

                    b.Property<int>("Lado")
                        .HasColumnType("integer");

                    b.Property<Guid>("RegiaoId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UlceraId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RegiaoId");

                    b.HasIndex("UlceraId");

                    b.ToTable("Topografias");
                });

            modelBuilder.Entity("Cn2x.Iryo.UlceraVenosa.Domain.Entities.Ulcera", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("AtualizadoEm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("AvaliacaoId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("ComprimentoCm")
                        .HasPrecision(5, 2)
                        .HasColumnType("numeric(5,2)");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataExame")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Desativada")
                        .HasColumnType("boolean");

                    b.Property<string>("Duracao")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal>("Largura")
                        .HasPrecision(5, 2)
                        .HasColumnType("numeric(5,2)");

                    b.Property<Guid>("PacienteId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Profundidade")
                        .HasPrecision(5, 2)
                        .HasColumnType("numeric(5,2)");

                    b.HasKey("Id");

                    b.HasIndex("AvaliacaoId");

                    b.HasIndex("PacienteId");

                    b.ToTable("Ulceras");
                });

            modelBuilder.Entity("Cn2x.Iryo.UlceraVenosa.Domain.Entities.Avaliacao", b =>
                {
                    b.HasOne("Cn2x.Iryo.UlceraVenosa.Domain.Entities.Paciente", "Paciente")
                        .WithMany("Avaliacoes")
                        .HasForeignKey("PacienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Paciente");
                });

            modelBuilder.Entity("Cn2x.Iryo.UlceraVenosa.Domain.Entities.Ceap", b =>
                {
                    b.HasOne("Cn2x.Iryo.UlceraVenosa.Domain.Entities.Anatomica", "Anatomia")
                        .WithMany("ClassificacoesCeap")
                        .HasForeignKey("AnatomiaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Cn2x.Iryo.UlceraVenosa.Domain.Entities.Clinica", "ClasseClinica")
                        .WithMany("ClassificacoesCeap")
                        .HasForeignKey("ClasseClinicaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Cn2x.Iryo.UlceraVenosa.Domain.Entities.Etiologica", "Etiologia")
                        .WithMany("ClassificacoesCeap")
                        .HasForeignKey("EtiologiaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Cn2x.Iryo.UlceraVenosa.Domain.Entities.Patofisiologica", "Patofisiologia")
                        .WithMany("ClassificacoesCeap")
                        .HasForeignKey("PatofisiologiaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Cn2x.Iryo.UlceraVenosa.Domain.Entities.Ulcera", null)
                        .WithOne("ClassificacaoCeap")
                        .HasForeignKey("Cn2x.Iryo.UlceraVenosa.Domain.Entities.Ceap", "UlceraId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Anatomia");

                    b.Navigation("ClasseClinica");

                    b.Navigation("Etiologia");

                    b.Navigation("Patofisiologia");
                });

            modelBuilder.Entity("Cn2x.Iryo.UlceraVenosa.Domain.Entities.Exsudato", b =>
                {
                    b.HasOne("Cn2x.Iryo.UlceraVenosa.Domain.Entities.ExsudatoTipo", "ExsudatoTipo")
                        .WithMany("Exsudatos")
                        .HasForeignKey("ExsudatoTipoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Cn2x.Iryo.UlceraVenosa.Domain.Entities.Ulcera", "Ulcera")
                        .WithMany("Exsudatos")
                        .HasForeignKey("UlceraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExsudatoTipo");

                    b.Navigation("Ulcera");
                });

            modelBuilder.Entity("Cn2x.Iryo.UlceraVenosa.Domain.Entities.ImagemUlcera", b =>
                {
                    b.HasOne("Cn2x.Iryo.UlceraVenosa.Domain.Entities.Ulcera", "Ulcera")
                        .WithMany("Imagens")
                        .HasForeignKey("UlceraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ulcera");
                });

            modelBuilder.Entity("Cn2x.Iryo.UlceraVenosa.Domain.Entities.RegiaoAnatomica", b =>
                {
                    b.HasOne("Cn2x.Iryo.UlceraVenosa.Domain.Entities.Segmento", "Segmento")
                        .WithMany("RegioesAnatomicas")
                        .HasForeignKey("SegmentoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Segmento");
                });

            modelBuilder.Entity("Cn2x.Iryo.UlceraVenosa.Domain.Entities.Topografia", b =>
                {
                    b.HasOne("Cn2x.Iryo.UlceraVenosa.Domain.Entities.RegiaoAnatomica", "Regiao")
                        .WithMany("Topografias")
                        .HasForeignKey("RegiaoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Cn2x.Iryo.UlceraVenosa.Domain.Entities.Ulcera", "Ulcera")
                        .WithMany("Topografias")
                        .HasForeignKey("UlceraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Regiao");

                    b.Navigation("Ulcera");
                });

            modelBuilder.Entity("Cn2x.Iryo.UlceraVenosa.Domain.Entities.Ulcera", b =>
                {
                    b.HasOne("Cn2x.Iryo.UlceraVenosa.Domain.Entities.Avaliacao", "Avaliacao")
                        .WithMany("Ulceras")
                        .HasForeignKey("AvaliacaoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cn2x.Iryo.UlceraVenosa.Domain.Entities.Paciente", "Paciente")
                        .WithMany("Ulceras")
                        .HasForeignKey("PacienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Cn2x.Iryo.UlceraVenosa.Domain.ValueObjects.Caracteristicas", "Caracteristicas", b1 =>
                        {
                            b1.Property<Guid>("UlceraId")
                                .HasColumnType("uuid");

                            b1.Property<bool>("BordasDefinidas")
                                .HasColumnType("boolean")
                                .HasColumnName("BordasDefinidas");

                            b1.Property<bool>("Necrose")
                                .HasColumnType("boolean")
                                .HasColumnName("Necrose");

                            b1.Property<bool>("OdorFetido")
                                .HasColumnType("boolean")
                                .HasColumnName("OdorFetido");

                            b1.Property<bool>("TecidoGranulacao")
                                .HasColumnType("boolean")
                                .HasColumnName("TecidoGranulacao");

                            b1.HasKey("UlceraId");

                            b1.ToTable("Ulceras");

                            b1.WithOwner()
                                .HasForeignKey("UlceraId");
                        });

                    b.OwnsOne("Cn2x.Iryo.UlceraVenosa.Domain.ValueObjects.SinaisInflamatorios", "SinaisInflamatorios", b1 =>
                        {
                            b1.Property<Guid>("UlceraId")
                                .HasColumnType("uuid");

                            b1.Property<bool>("Calor")
                                .HasColumnType("boolean")
                                .HasColumnName("Calor");

                            b1.Property<bool>("Dor")
                                .HasColumnType("boolean")
                                .HasColumnName("Dor");

                            b1.Property<bool>("Edema")
                                .HasColumnType("boolean")
                                .HasColumnName("Edema");

                            b1.Property<bool>("Eritema")
                                .HasColumnType("boolean")
                                .HasColumnName("Eritema");

                            b1.Property<bool>("PerdadeFuncao")
                                .HasColumnType("boolean")
                                .HasColumnName("PerdadeFuncao");

                            b1.Property<bool>("Rubor")
                                .HasColumnType("boolean")
                                .HasColumnName("Rubor");

                            b1.HasKey("UlceraId");

                            b1.ToTable("Ulceras");

                            b1.WithOwner()
                                .HasForeignKey("UlceraId");
                        });

                    b.Navigation("Avaliacao");

                    b.Navigation("Caracteristicas")
                        .IsRequired();

                    b.Navigation("Paciente");

                    b.Navigation("SinaisInflamatorios")
                        .IsRequired();
                });

            modelBuilder.Entity("Cn2x.Iryo.UlceraVenosa.Domain.Entities.Anatomica", b =>
                {
                    b.Navigation("ClassificacoesCeap");
                });

            modelBuilder.Entity("Cn2x.Iryo.UlceraVenosa.Domain.Entities.Avaliacao", b =>
                {
                    b.Navigation("Ulceras");
                });

            modelBuilder.Entity("Cn2x.Iryo.UlceraVenosa.Domain.Entities.Clinica", b =>
                {
                    b.Navigation("ClassificacoesCeap");
                });

            modelBuilder.Entity("Cn2x.Iryo.UlceraVenosa.Domain.Entities.Etiologica", b =>
                {
                    b.Navigation("ClassificacoesCeap");
                });

            modelBuilder.Entity("Cn2x.Iryo.UlceraVenosa.Domain.Entities.ExsudatoTipo", b =>
                {
                    b.Navigation("Exsudatos");
                });

            modelBuilder.Entity("Cn2x.Iryo.UlceraVenosa.Domain.Entities.Paciente", b =>
                {
                    b.Navigation("Avaliacoes");

                    b.Navigation("Ulceras");
                });

            modelBuilder.Entity("Cn2x.Iryo.UlceraVenosa.Domain.Entities.Patofisiologica", b =>
                {
                    b.Navigation("ClassificacoesCeap");
                });

            modelBuilder.Entity("Cn2x.Iryo.UlceraVenosa.Domain.Entities.RegiaoAnatomica", b =>
                {
                    b.Navigation("Topografias");
                });

            modelBuilder.Entity("Cn2x.Iryo.UlceraVenosa.Domain.Entities.Segmento", b =>
                {
                    b.Navigation("RegioesAnatomicas");
                });

            modelBuilder.Entity("Cn2x.Iryo.UlceraVenosa.Domain.Entities.Ulcera", b =>
                {
                    b.Navigation("ClassificacaoCeap")
                        .IsRequired();

                    b.Navigation("Exsudatos");

                    b.Navigation("Imagens");

                    b.Navigation("Topografias");
                });
#pragma warning restore 612, 618
        }
    }
}
