// <auto-generated />
using Cn2x.Iryo.UlceraVenosa.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Cn2x.Iryo.UlceraVenosa.Infrastructure.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.7");

            modelBuilder.Entity("Cn2x.Iryo.UlceraVenosa.Domain.Entities.AvaliacaoUlcera", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<string>("AtualizadoEm")
                        .HasColumnType("TEXT")
                        .HasColumnName("atualizado_em");

                    b.Property<string>("CriadoEm")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("criado_em");

                    b.Property<string>("DataAvaliacao")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("data_avaliacao");

                    b.Property<int>("Desativada")
                        .HasColumnType("INTEGER")
                        .HasColumnName("desativada");

                    b.Property<int>("MesesDuracao")
                        .HasColumnType("INTEGER")
                        .HasColumnName("meses_duracao");

                    b.Property<string>("UlceraId")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("ulcera_id");

                    b.HasKey("Id")
                        .HasName("pk_avaliacoes_ulcera");

                    b.HasIndex("UlceraId")
                        .HasDatabaseName("ix_avaliacoes_ulcera_ulcera_id");

                    b.ToTable("avaliacoes_ulcera", (string)null);
                });

            modelBuilder.Entity("Cn2x.Iryo.UlceraVenosa.Domain.Entities.Exsudato", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<string>("AtualizadoEm")
                        .HasColumnType("TEXT")
                        .HasColumnName("atualizado_em");

                    b.Property<string>("CriadoEm")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("criado_em");

                    b.Property<int>("Desativada")
                        .HasColumnType("INTEGER")
                        .HasColumnName("desativada");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT")
                        .HasColumnName("descricao");

                    b.HasKey("Id")
                        .HasName("pk_exsudato_tipos");

                    b.ToTable("exsudatos", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "11111111-1111-1111-1111-111111111111",
                            CriadoEm = "2025-06-28 17:32:53",
                            Desativada = 0,
                            Descricao = "Seroso - Transparente ou levemente amarelo, aquoso, fluido. Indicação: Fase inflamatória leve ou cicatrização. Conduta: Monitorar, manter hidratação da ferida."
                        },
                        new
                        {
                            Id = "22222222-2222-2222-2222-222222222222",
                            CriadoEm = "2025-06-28 17:32:53",
                            Desativada = 0,
                            Descricao = "Serossanguinolento - Rosa claro, diluído com sangue, levemente viscoso. Indicação: Trauma leve ou início de granulação. Conduta: Avaliar trauma, proteger bordas."
                        },
                        new
                        {
                            Id = "33333333-3333-3333-3333-333333333333",
                            CriadoEm = "2025-06-28 17:32:53",
                            Desativada = 0,
                            Descricao = "Sanguinolento - Vermelho vivo, líquido a viscoso. Indicação: Sangramento ativo ou lesão capilar. Conduta: Estancar, avaliar necessidade de sutura."
                        },
                        new
                        {
                            Id = "44444444-4444-4444-4444-444444444444",
                            CriadoEm = "2025-06-28 17:32:53",
                            Desativada = 0,
                            Descricao = "Hemorrágico - Vermelho escuro ou vivo, espesso, com coágulos. Indicação: Hemorragia arterial ou venosa local. Conduta: Urgência médica, hemostasia."
                        },
                        new
                        {
                            Id = "55555555-5555-5555-5555-555555555555",
                            CriadoEm = "2025-06-28 17:32:53",
                            Desativada = 0,
                            Descricao = "Purulento - Amarelo, esverdeado ou acastanhado, espesso, fétido. Indicação: Infecção bacteriana ativa. Conduta: Cultura, antibioticoterapia, limpeza."
                        },
                        new
                        {
                            Id = "66666666-6666-6666-6666-666666666666",
                            CriadoEm = "2025-06-28 17:32:53",
                            Desativada = 0,
                            Descricao = "Fibrinoso - Esbranquiçado ou amarelado, gelatinoso, filamentoso. Indicação: Presença de fibrina, biofilme. Conduta: Desbridamento, controle da umidade."
                        },
                        new
                        {
                            Id = "77777777-7777-7777-7777-777777777777",
                            CriadoEm = "2025-06-28 17:32:53",
                            Desativada = 0,
                            Descricao = "Catarral - Esbranquiçado e mucoide, viscoso. Indicação: Presente em áreas mucosas ou com inflamação leve. Conduta: Raro em úlceras venosas, observar."
                        },
                        new
                        {
                            Id = "88888888-8888-8888-8888-888888888888",
                            CriadoEm = "2025-06-28 17:32:53",
                            Desativada = 0,
                            Descricao = "Necrótico - Marrom, cinza ou preto, espesso, seco ou úmido. Indicação: Presença de necrose tecidual. Conduta: Desbridamento enzimático ou cirúrgico."
                        },
                        new
                        {
                            Id = "99999999-9999-9999-9999-999999999999",
                            CriadoEm = "2025-06-28 17:32:53",
                            Desativada = 0,
                            Descricao = "Putrilaginoso - Cinza-esverdeado, muito espesso, pegajoso, fétido. Indicação: Infecção crítica, tecido desvitalizado. Conduta: Ação rápida: desbridamento + antibiótico."
                        },
                        new
                        {
                            Id = "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                            CriadoEm = "2025-06-28 17:32:53",
                            Desativada = 0,
                            Descricao = "Hiperexsudativo - Variável, muito abundante. Indicação: Descompensação venosa, linforreia, infecção. Conduta: Curativos superabsorventes, compressão."
                        });
                });

            modelBuilder.Entity("Cn2x.Iryo.UlceraVenosa.Domain.Entities.ExsudatoDaAvaliacao", b =>
                {
                    b.Property<string>("AvaliacaoUlceraId")
                        .HasColumnType("TEXT")
                        .HasColumnName("avaliacao_ulcera_id");

                    b.Property<string>("ExsudatoId")
                        .HasColumnType("TEXT")
                        .HasColumnName("exsudato_id");

                    b.HasKey("AvaliacaoUlceraId", "ExsudatoId");

                    b.HasIndex("ExsudatoId")
                        .HasDatabaseName("ix_exsudatos_avaliacao_exsudato_id");

                    b.ToTable("exsudatos_avaliacao", (string)null);
                });

            modelBuilder.Entity("Cn2x.Iryo.UlceraVenosa.Domain.Entities.ImagemAvaliacaoUlcera", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<string>("AtualizadoEm")
                        .HasColumnType("TEXT")
                        .HasColumnName("atualizado_em");

                    b.Property<string>("AvaliacaoUlceraId")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("avaliacao_ulcera_id");

                    b.Property<string>("CriadoEm")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("criado_em");

                    b.Property<int>("Desativada")
                        .HasColumnType("INTEGER")
                        .HasColumnName("desativada");

                    b.HasKey("Id")
                        .HasName("pk_imagem_avaliacao_ulcera");

                    b.HasIndex("AvaliacaoUlceraId")
                        .HasDatabaseName("ix_imagem_avaliacao_ulcera_avaliacao_ulcera_id");

                    b.ToTable("imagens_avaliacao_ulcera", (string)null);
                });

            modelBuilder.Entity("Cn2x.Iryo.UlceraVenosa.Domain.Entities.Lateralidade", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<string>("AtualizadoEm")
                        .HasColumnType("TEXT")
                        .HasColumnName("atualizado_em");

                    b.Property<string>("CriadoEm")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("criado_em");

                    b.Property<int>("Desativada")
                        .HasColumnType("INTEGER")
                        .HasColumnName("desativada");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("nome");

                    b.HasKey("Id")
                        .HasName("pk_lateralidades");

                    b.ToTable("lateralidades", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "55555555-aaaa-bbbb-cccc-111111111111",
                            CriadoEm = "2025-07-09 00:00:00",
                            Desativada = 0,
                            Nome = "Direita"
                        },
                        new
                        {
                            Id = "66666666-bbbb-cccc-dddd-222222222222",
                            CriadoEm = "2025-07-09 00:00:00",
                            Desativada = 0,
                            Nome = "Esquerda"
                        });
                });

            modelBuilder.Entity("Cn2x.Iryo.UlceraVenosa.Domain.Entities.Paciente", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<string>("AtualizadoEm")
                        .HasColumnType("TEXT")
                        .HasColumnName("atualizado_em");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("TEXT")
                        .HasColumnName("cpf");

                    b.Property<string>("CriadoEm")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("criado_em");

                    b.Property<int>("Desativada")
                        .HasColumnType("INTEGER")
                        .HasColumnName("desativada");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT")
                        .HasColumnName("nome");

                    b.HasKey("Id")
                        .HasName("pk_pacientes");

                    b.HasIndex("Cpf")
                        .IsUnique();

                    b.ToTable("pacientes", (string)null);
                });

            modelBuilder.Entity("Cn2x.Iryo.UlceraVenosa.Domain.Entities.RegiaoAnatomica", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<string>("AtualizadoEm")
                        .HasColumnType("TEXT")
                        .HasColumnName("atualizado_em");

                    b.Property<string>("CriadoEm")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("criado_em");

                    b.Property<int>("Desativada")
                        .HasColumnType("INTEGER")
                        .HasColumnName("desativada");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("descricao");

                    b.Property<string>("Sigla")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("sigla");

                    b.HasKey("Id")
                        .HasName("pk_regioes_anatomicas");

                    b.ToTable("regiao_anatomica", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "44444444-4444-4444-4444-444444444444",
                            CriadoEm = "2025-07-09 00:00:00",
                            Desativada = 0,
                            Descricao = "Medial",
                            Sigla = "M"
                        },
                        new
                        {
                            Id = "55555555-5555-5555-5555-555555555555",
                            CriadoEm = "2025-07-09 00:00:00",
                            Desativada = 0,
                            Descricao = "Lateral",
                            Sigla = "L"
                        },
                        new
                        {
                            Id = "66666666-6666-6666-6666-666666666666",
                            CriadoEm = "2025-07-09 00:00:00",
                            Desativada = 0,
                            Descricao = "Anterior",
                            Sigla = "A"
                        },
                        new
                        {
                            Id = "77777777-7777-7777-7777-777777777777",
                            CriadoEm = "2025-07-09 00:00:00",
                            Desativada = 0,
                            Descricao = "Posterior",
                            Sigla = "P"
                        },
                        new
                        {
                            Id = "88888888-8888-8888-8888-888888888888",
                            CriadoEm = "2025-07-09 00:00:00",
                            Desativada = 0,
                            Descricao = "Anteromedial",
                            Sigla = "AM"
                        },
                        new
                        {
                            Id = "99999999-9999-9999-9999-999999999999",
                            CriadoEm = "2025-07-09 00:00:00",
                            Desativada = 0,
                            Descricao = "Posterolateral",
                            Sigla = "PL"
                        });
                });

            modelBuilder.Entity("Cn2x.Iryo.UlceraVenosa.Domain.Entities.RegiaoTopograficaPe", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<string>("AtualizadoEm")
                        .HasColumnType("TEXT")
                        .HasColumnName("atualizado_em");

                    b.Property<string>("CriadoEm")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("criado_em");

                    b.Property<int>("Desativada")
                        .HasColumnType("INTEGER")
                        .HasColumnName("desativada");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("descricao");

                    b.Property<string>("Sigla")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("sigla");

                    b.HasKey("Id")
                        .HasName("pk_regioes_topograficas_pe");

                    b.ToTable("regiao_topografica_pe", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                            CriadoEm = "2025-07-09 00:00:00",
                            Desativada = 0,
                            Descricao = "Dorsal",
                            Sigla = "DOR"
                        },
                        new
                        {
                            Id = "bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb",
                            CriadoEm = "2025-07-09 00:00:00",
                            Desativada = 0,
                            Descricao = "Plantar",
                            Sigla = "PLA"
                        },
                        new
                        {
                            Id = "cccccccc-cccc-cccc-cccc-cccccccccccc",
                            CriadoEm = "2025-07-09 00:00:00",
                            Desativada = 0,
                            Descricao = "Calcâneo",
                            Sigla = "CAL"
                        },
                        new
                        {
                            Id = "dddddddd-dddd-dddd-dddd-dddddddddddd",
                            CriadoEm = "2025-07-09 00:00:00",
                            Desativada = 0,
                            Descricao = "Mediopé",
                            Sigla = "MED"
                        },
                        new
                        {
                            Id = "eeeeeeee-eeee-eeee-eeee-eeeeeeeeeeee",
                            CriadoEm = "2025-07-09 00:00:00",
                            Desativada = 0,
                            Descricao = "Antepé",
                            Sigla = "ANT"
                        },
                        new
                        {
                            Id = "ffffffff-ffff-ffff-ffff-ffffffffffff",
                            CriadoEm = "2025-07-09 00:00:00",
                            Desativada = 0,
                            Descricao = "Halux",
                            Sigla = "HAL"
                        },
                        new
                        {
                            Id = "11111111-2222-3333-4444-555555555555",
                            CriadoEm = "2025-07-09 00:00:00",
                            Desativada = 0,
                            Descricao = "Lateral",
                            Sigla = "LAT"
                        },
                        new
                        {
                            Id = "22222222-3333-4444-5555-666666666666",
                            CriadoEm = "2025-07-09 00:00:00",
                            Desativada = 0,
                            Descricao = "Medial",
                            Sigla = "MEDL"
                        },
                        new
                        {
                            Id = "33333333-4444-5555-6666-777777777777",
                            CriadoEm = "2025-07-09 00:00:00",
                            Desativada = 0,
                            Descricao = "Malelo Medial",
                            Sigla = "MMED"
                        },
                        new
                        {
                            Id = "44444444-5555-6666-7777-888888888888",
                            CriadoEm = "2025-07-09 00:00:00",
                            Desativada = 0,
                            Descricao = "Malelo Lateral",
                            Sigla = "MLAT"
                        });
                });

            modelBuilder.Entity("Cn2x.Iryo.UlceraVenosa.Domain.Entities.Segmentacao", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<string>("AtualizadoEm")
                        .HasColumnType("TEXT")
                        .HasColumnName("atualizado_em");

                    b.Property<string>("CriadoEm")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("criado_em");

                    b.Property<int>("Desativada")
                        .HasColumnType("INTEGER")
                        .HasColumnName("desativada");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("descricao");

                    b.Property<string>("Sigla")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("sigla");

                    b.HasKey("Id")
                        .HasName("pk_segmentacoes");

                    b.ToTable("segmentacao", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "11111111-1111-1111-1111-111111111111",
                            CriadoEm = "2025-07-09 00:00:00",
                            Desativada = 0,
                            Descricao = "Da fossa poplítea até ~2/3 da altura da perna",
                            Sigla = "TS"
                        },
                        new
                        {
                            Id = "22222222-2222-2222-2222-222222222222",
                            CriadoEm = "2025-07-09 00:00:00",
                            Desativada = 0,
                            Descricao = "Da porção média até cerca de 1/3 acima do maléolo",
                            Sigla = "TM"
                        },
                        new
                        {
                            Id = "33333333-3333-3333-3333-333333333333",
                            CriadoEm = "2025-07-09 00:00:00",
                            Desativada = 0,
                            Descricao = "Do final do médio até os maléolos (região do tornozelo)",
                            Sigla = "TI"
                        });
                });

            modelBuilder.Entity("Cn2x.Iryo.UlceraVenosa.Domain.Entities.Topografia", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<string>("AtualizadoEm")
                        .HasColumnType("TEXT")
                        .HasColumnName("atualizado_em");

                    b.Property<string>("CriadoEm")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("criado_em");

                    b.Property<int>("Desativada")
                        .HasColumnType("INTEGER")
                        .HasColumnName("desativada");

                    b.Property<string>("LateralidadeId")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("lateralidade_id");

                    b.HasKey("Id")
                        .HasName("pk_topografias");

                    b.HasIndex("LateralidadeId")
                        .HasDatabaseName("ix_topografias_lateralidade_id");

                    b.ToTable("topografias", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Cn2x.Iryo.UlceraVenosa.Domain.Entities.Ulcera", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<string>("AtualizadoEm")
                        .HasColumnType("TEXT")
                        .HasColumnName("atualizado_em");

                    b.Property<string>("CriadoEm")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("criado_em");

                    b.Property<int>("Desativada")
                        .HasColumnType("INTEGER")
                        .HasColumnName("desativada");

                    b.Property<string>("PacienteId")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("paciente_id");

                    b.Property<string>("TopografiaId")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("topografia_id");

                    b.HasKey("Id")
                        .HasName("pk_ulceras");

                    b.HasIndex("PacienteId")
                        .HasDatabaseName("ix_ulceras_paciente_id");

                    b.HasIndex("TopografiaId")
                        .HasDatabaseName("ix_ulceras_topografia_id");

                    b.ToTable("ulceras", (string)null);
                });

            modelBuilder.Entity("Cn2x.Iryo.UlceraVenosa.Domain.Entities.TopografiaPe", b =>
                {
                    b.HasBaseType("Cn2x.Iryo.UlceraVenosa.Domain.Entities.Topografia");

                    b.Property<string>("RegiaoTopograficaPeId")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("regiao_topografica_pe_id");

                    b.HasIndex("RegiaoTopograficaPeId")
                        .HasDatabaseName("ix_topografias_regiao_topografica_pe_id");

                    b.ToTable("topografia_pe", (string)null);
                });

            modelBuilder.Entity("Cn2x.Iryo.UlceraVenosa.Domain.Entities.TopografiaPerna", b =>
                {
                    b.HasBaseType("Cn2x.Iryo.UlceraVenosa.Domain.Entities.Topografia");

                    b.Property<string>("RegiaoAnatomicaId")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("regiao_anatomica_id");

                    b.Property<string>("SegmentacaoId")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("segmentacao_id");

                    b.HasIndex("RegiaoAnatomicaId")
                        .HasDatabaseName("ix_topografias_regiao_anatomica_id");

                    b.HasIndex("SegmentacaoId")
                        .HasDatabaseName("ix_topografias_segmentacao_id");

                    b.ToTable("topografia_perna", (string)null);
                });

            modelBuilder.Entity("Cn2x.Iryo.UlceraVenosa.Domain.Entities.AvaliacaoUlcera", b =>
                {
                    b.HasOne("Cn2x.Iryo.UlceraVenosa.Domain.Entities.Ulcera", "Ulcera")
                        .WithMany("Avaliacoes")
                        .HasForeignKey("UlceraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Cn2x.Iryo.UlceraVenosa.Domain.ValueObjects.Caracteristicas", "Caracteristicas", b1 =>
                        {
                            b1.Property<string>("avaliacao_ferida_id")
                                .HasColumnType("TEXT");

                            b1.Property<int>("BordasDefinidas")
                                .HasColumnType("INTEGER")
                                .HasColumnName("bordas_definidas");

                            b1.Property<int>("Necrose")
                                .HasColumnType("INTEGER")
                                .HasColumnName("necrose");

                            b1.Property<int>("OdorFetido")
                                .HasColumnType("INTEGER")
                                .HasColumnName("odor_fetido");

                            b1.Property<int>("TecidoGranulacao")
                                .HasColumnType("INTEGER")
                                .HasColumnName("tecido_granulacao");

                            b1.HasKey("avaliacao_ferida_id");

                            b1.ToTable("caracteristicas", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("avaliacao_ferida_id");
                        });

                    b.OwnsOne("Cn2x.Iryo.UlceraVenosa.Domain.ValueObjects.Medida", "Medida", b1 =>
                        {
                            b1.Property<string>("avaliacao_ferida_id")
                                .HasColumnType("TEXT");

                            b1.Property<decimal?>("Comprimento")
                                .HasColumnType("decimal(10,2)")
                                .HasColumnName("comprimento");

                            b1.Property<decimal?>("Largura")
                                .HasColumnType("decimal(10,2)")
                                .HasColumnName("largura");

                            b1.Property<decimal?>("Profundidade")
                                .HasColumnType("decimal(10,2)")
                                .HasColumnName("profundidade");

                            b1.HasKey("avaliacao_ferida_id");

                            b1.ToTable("medida", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("avaliacao_ferida_id");
                        });

                    b.OwnsOne("Cn2x.Iryo.UlceraVenosa.Domain.ValueObjects.SinaisInflamatorios", "SinaisInflamatorios", b1 =>
                        {
                            b1.Property<string>("avaliacao_ferida_id")
                                .HasColumnType("TEXT");

                            b1.Property<int>("Calor")
                                .HasColumnType("INTEGER")
                                .HasColumnName("calor");

                            b1.Property<int>("Dor")
                                .HasColumnType("INTEGER")
                                .HasColumnName("dor");

                            b1.Property<int>("Edema")
                                .HasColumnType("INTEGER")
                                .HasColumnName("edema");

                            b1.Property<int>("Eritema")
                                .HasColumnType("INTEGER")
                                .HasColumnName("eritema");

                            b1.Property<int>("PerdadeFuncao")
                                .HasColumnType("INTEGER")
                                .HasColumnName("perda_de_funcao");

                            b1.Property<int>("Rubor")
                                .HasColumnType("INTEGER")
                                .HasColumnName("rubor");

                            b1.HasKey("avaliacao_ferida_id");

                            b1.ToTable("sinais_inflamatorios", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("avaliacao_ferida_id");
                        });

                    b.Navigation("Caracteristicas")
                        .IsRequired();

                    b.Navigation("Medida");

                    b.Navigation("SinaisInflamatorios")
                        .IsRequired();

                    b.Navigation("Ulcera");
                });

            modelBuilder.Entity("Cn2x.Iryo.UlceraVenosa.Domain.Entities.ExsudatoDaAvaliacao", b =>
                {
                    b.HasOne("Cn2x.Iryo.UlceraVenosa.Domain.Entities.AvaliacaoUlcera", "AvaliacaoUlcera")
                        .WithMany("Exsudatos")
                        .HasForeignKey("AvaliacaoUlceraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cn2x.Iryo.UlceraVenosa.Domain.Entities.Exsudato", "Exsudato")
                        .WithMany()
                        .HasForeignKey("ExsudatoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AvaliacaoUlcera");

                    b.Navigation("Exsudato");
                });

            modelBuilder.Entity("Cn2x.Iryo.UlceraVenosa.Domain.Entities.ImagemAvaliacaoUlcera", b =>
                {
                    b.HasOne("Cn2x.Iryo.UlceraVenosa.Domain.Entities.AvaliacaoUlcera", "AvaliacaoUlcera")
                        .WithMany("Imagens")
                        .HasForeignKey("AvaliacaoUlceraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Cn2x.Iryo.UlceraVenosa.Domain.ValueObjects.Imagem", "Imagem", b1 =>
                        {
                            b1.Property<string>("ImagemAvaliacaoUlceraId")
                                .HasColumnType("TEXT");

                            b1.Property<string>("ContentType")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasColumnName("content_type");

                            b1.Property<string>("DataCaptura")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasColumnName("data_captura");

                            b1.Property<int>("TamanhoBytes")
                                .HasColumnType("INTEGER")
                                .HasColumnName("tamanho_bytes");

                            b1.HasKey("ImagemAvaliacaoUlceraId");

                            b1.ToTable("imagem", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("ImagemAvaliacaoUlceraId");
                        });

                    b.Navigation("AvaliacaoUlcera");

                    b.Navigation("Imagem")
                        .IsRequired();
                });

            modelBuilder.Entity("Cn2x.Iryo.UlceraVenosa.Domain.Entities.Topografia", b =>
                {
                    b.HasOne("Cn2x.Iryo.UlceraVenosa.Domain.Entities.Lateralidade", "Lateralidade")
                        .WithMany()
                        .HasForeignKey("LateralidadeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lateralidade");
                });

            modelBuilder.Entity("Cn2x.Iryo.UlceraVenosa.Domain.Entities.Ulcera", b =>
                {
                    b.HasOne("Cn2x.Iryo.UlceraVenosa.Domain.Entities.Paciente", "Paciente")
                        .WithMany("Ulceras")
                        .HasForeignKey("PacienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cn2x.Iryo.UlceraVenosa.Domain.Entities.Topografia", "Topografia")
                        .WithMany()
                        .HasForeignKey("TopografiaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsOne("Cn2x.Iryo.UlceraVenosa.Domain.ValueObjects.Ceap", "Ceap", b1 =>
                        {
                            b1.Property<string>("ulcera_id")
                                .HasColumnType("TEXT");

                            b1.Property<int>("Anatomia")
                                .HasColumnType("INTEGER")
                                .HasColumnName("anatomia");

                            b1.Property<int>("ClasseClinica")
                                .HasColumnType("INTEGER")
                                .HasColumnName("classe_clinica");

                            b1.Property<int>("Etiologia")
                                .HasColumnType("INTEGER")
                                .HasColumnName("etiologia");

                            b1.Property<int>("Patofisiologia")
                                .HasColumnType("INTEGER")
                                .HasColumnName("patofisiologia");

                            b1.HasKey("ulcera_id");

                            b1.ToTable("ceap", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("ulcera_id");
                        });

                    b.Navigation("Ceap");

                    b.Navigation("Paciente");

                    b.Navigation("Topografia");
                });

            modelBuilder.Entity("Cn2x.Iryo.UlceraVenosa.Domain.Entities.TopografiaPe", b =>
                {
                    b.HasOne("Cn2x.Iryo.UlceraVenosa.Domain.Entities.Topografia", null)
                        .WithOne()
                        .HasForeignKey("Cn2x.Iryo.UlceraVenosa.Domain.Entities.TopografiaPe", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cn2x.Iryo.UlceraVenosa.Domain.Entities.RegiaoTopograficaPe", "RegiaoTopograficaPe")
                        .WithMany()
                        .HasForeignKey("RegiaoTopograficaPeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RegiaoTopograficaPe");
                });

            modelBuilder.Entity("Cn2x.Iryo.UlceraVenosa.Domain.Entities.TopografiaPerna", b =>
                {
                    b.HasOne("Cn2x.Iryo.UlceraVenosa.Domain.Entities.Topografia", null)
                        .WithOne()
                        .HasForeignKey("Cn2x.Iryo.UlceraVenosa.Domain.Entities.TopografiaPerna", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cn2x.Iryo.UlceraVenosa.Domain.Entities.RegiaoAnatomica", "RegiaoAnatomica")
                        .WithMany()
                        .HasForeignKey("RegiaoAnatomicaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cn2x.Iryo.UlceraVenosa.Domain.Entities.Segmentacao", "Segmentacao")
                        .WithMany()
                        .HasForeignKey("SegmentacaoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RegiaoAnatomica");

                    b.Navigation("Segmentacao");
                });

            modelBuilder.Entity("Cn2x.Iryo.UlceraVenosa.Domain.Entities.AvaliacaoUlcera", b =>
                {
                    b.Navigation("Exsudatos");

                    b.Navigation("Imagens");
                });

            modelBuilder.Entity("Cn2x.Iryo.UlceraVenosa.Domain.Entities.Paciente", b =>
                {
                    b.Navigation("Ulceras");
                });

            modelBuilder.Entity("Cn2x.Iryo.UlceraVenosa.Domain.Entities.Ulcera", b =>
                {
                    b.Navigation("Avaliacoes");
                });
#pragma warning restore 612, 618
        }
    }
}
