// <auto-generated />
using System;
using Cn2x.Iryo.UlceraVenosa.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Cn2x.Iryo.UlceraVenosa.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250630213639_AddUniqueIndexToTopografia")]
    partial class AddUniqueIndexToTopografia
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Cn2x.Iryo.UlceraVenosa.Domain.Entities.Anatomica", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("AtualizadoEm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Desativada")
                        .HasColumnType("boolean");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.ToTable("Anatomicas");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            Codigo = "As",
                            CriadoEm = new DateTime(2025, 6, 28, 19, 0, 0, 0, DateTimeKind.Utc),
                            Desativada = false,
                            Descricao = "Sistema superficial"
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            Codigo = "Ad",
                            CriadoEm = new DateTime(2025, 6, 28, 19, 0, 0, 0, DateTimeKind.Utc),
                            Desativada = false,
                            Descricao = "Sistema profundo"
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333333"),
                            Codigo = "Ap",
                            CriadoEm = new DateTime(2025, 6, 28, 19, 0, 0, 0, DateTimeKind.Utc),
                            Desativada = false,
                            Descricao = "Sistema perfurante"
                        },
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-444444444444"),
                            Codigo = "An",
                            CriadoEm = new DateTime(2025, 6, 28, 19, 0, 0, 0, DateTimeKind.Utc),
                            Desativada = false,
                            Descricao = "Sem localização anatômica identificada"
                        });
                });

            modelBuilder.Entity("Cn2x.Iryo.UlceraVenosa.Domain.Entities.Avaliacao", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("AtualizadoEm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Conduta")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataAvaliacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Desativada")
                        .HasColumnType("boolean");

                    b.Property<string>("Diagnostico")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Observacoes")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<Guid>("PacienteId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PacienteId");

                    b.ToTable("Avaliacoes");
                });

            modelBuilder.Entity("Cn2x.Iryo.UlceraVenosa.Domain.Entities.Clinica", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("AtualizadoEm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Desativada")
                        .HasColumnType("boolean");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.ToTable("Clinicas");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            Codigo = "C0",
                            CriadoEm = new DateTime(2025, 6, 28, 19, 0, 0, 0, DateTimeKind.Utc),
                            Desativada = false,
                            Descricao = "Sem sinais visíveis ou palpáveis de doença venosa"
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            Codigo = "C1",
                            CriadoEm = new DateTime(2025, 6, 28, 19, 0, 0, 0, DateTimeKind.Utc),
                            Desativada = false,
                            Descricao = "Telangiectasias ou veias reticulares"
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333333"),
                            Codigo = "C2",
                            CriadoEm = new DateTime(2025, 6, 28, 19, 0, 0, 0, DateTimeKind.Utc),
                            Desativada = false,
                            Descricao = "Veias varicosas"
                        },
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-444444444444"),
                            Codigo = "C3",
                            CriadoEm = new DateTime(2025, 6, 28, 19, 0, 0, 0, DateTimeKind.Utc),
                            Desativada = false,
                            Descricao = "Edema"
                        },
                        new
                        {
                            Id = new Guid("55555555-5555-5555-5555-555555555555"),
                            Codigo = "C4a",
                            CriadoEm = new DateTime(2025, 6, 28, 19, 0, 0, 0, DateTimeKind.Utc),
                            Desativada = false,
                            Descricao = "Pigmentação ou eczema"
                        },
                        new
                        {
                            Id = new Guid("66666666-6666-6666-6666-666666666666"),
                            Codigo = "C4b",
                            CriadoEm = new DateTime(2025, 6, 28, 19, 0, 0, 0, DateTimeKind.Utc),
                            Desativada = false,
                            Descricao = "Lipodermatoesclerose ou atrofia branca"
                        },
                        new
                        {
                            Id = new Guid("77777777-7777-7777-7777-777777777777"),
                            Codigo = "C5",
                            CriadoEm = new DateTime(2025, 6, 28, 19, 0, 0, 0, DateTimeKind.Utc),
                            Desativada = false,
                            Descricao = "Úlcera venosa cicatrizada"
                        },
                        new
                        {
                            Id = new Guid("88888888-8888-8888-8888-888888888888"),
                            Codigo = "C6",
                            CriadoEm = new DateTime(2025, 6, 28, 19, 0, 0, 0, DateTimeKind.Utc),
                            Desativada = false,
                            Descricao = "Úlcera venosa ativa"
                        });
                });

            modelBuilder.Entity("Cn2x.Iryo.UlceraVenosa.Domain.Entities.Etiologica", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("AtualizadoEm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Desativada")
                        .HasColumnType("boolean");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.ToTable("Etiologicas");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            Codigo = "Ec",
                            CriadoEm = new DateTime(2025, 6, 28, 19, 0, 0, 0, DateTimeKind.Utc),
                            Desativada = false,
                            Descricao = "Congênita"
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            Codigo = "Ep",
                            CriadoEm = new DateTime(2025, 6, 28, 19, 0, 0, 0, DateTimeKind.Utc),
                            Desativada = false,
                            Descricao = "Primária"
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333333"),
                            Codigo = "Es",
                            CriadoEm = new DateTime(2025, 6, 28, 19, 0, 0, 0, DateTimeKind.Utc),
                            Desativada = false,
                            Descricao = "Secundária (pós-trombótica)"
                        },
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-444444444444"),
                            Codigo = "En",
                            CriadoEm = new DateTime(2025, 6, 28, 19, 0, 0, 0, DateTimeKind.Utc),
                            Desativada = false,
                            Descricao = "Não identificada"
                        });
                });

            modelBuilder.Entity("Cn2x.Iryo.UlceraVenosa.Domain.Entities.Exsudato", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("AtualizadoEm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Desativada")
                        .HasColumnType("boolean");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.ToTable("ExsudatoTipos");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            CriadoEm = new DateTime(2025, 6, 28, 17, 32, 53, 0, DateTimeKind.Utc),
                            Desativada = false,
                            Descricao = "Seroso - Transparente ou levemente amarelo, aquoso, fluido. Indicação: Fase inflamatória leve ou cicatrização. Conduta: Monitorar, manter hidratação da ferida."
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            CriadoEm = new DateTime(2025, 6, 28, 17, 32, 53, 0, DateTimeKind.Utc),
                            Desativada = false,
                            Descricao = "Serossanguinolento - Rosa claro, diluído com sangue, levemente viscoso. Indicação: Trauma leve ou início de granulação. Conduta: Avaliar trauma, proteger bordas."
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333333"),
                            CriadoEm = new DateTime(2025, 6, 28, 17, 32, 53, 0, DateTimeKind.Utc),
                            Desativada = false,
                            Descricao = "Sanguinolento - Vermelho vivo, líquido a viscoso. Indicação: Sangramento ativo ou lesão capilar. Conduta: Estancar, avaliar necessidade de sutura."
                        },
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-444444444444"),
                            CriadoEm = new DateTime(2025, 6, 28, 17, 32, 53, 0, DateTimeKind.Utc),
                            Desativada = false,
                            Descricao = "Hemorrágico - Vermelho escuro ou vivo, espesso, com coágulos. Indicação: Hemorragia arterial ou venosa local. Conduta: Urgência médica, hemostasia."
                        },
                        new
                        {
                            Id = new Guid("55555555-5555-5555-5555-555555555555"),
                            CriadoEm = new DateTime(2025, 6, 28, 17, 32, 53, 0, DateTimeKind.Utc),
                            Desativada = false,
                            Descricao = "Purulento - Amarelo, esverdeado ou acastanhado, espesso, fétido. Indicação: Infecção bacteriana ativa. Conduta: Cultura, antibioticoterapia, limpeza."
                        },
                        new
                        {
                            Id = new Guid("66666666-6666-6666-6666-666666666666"),
                            CriadoEm = new DateTime(2025, 6, 28, 17, 32, 53, 0, DateTimeKind.Utc),
                            Desativada = false,
                            Descricao = "Fibrinoso - Esbranquiçado ou amarelado, gelatinoso, filamentoso. Indicação: Presença de fibrina, biofilme. Conduta: Desbridamento, controle da umidade."
                        },
                        new
                        {
                            Id = new Guid("77777777-7777-7777-7777-777777777777"),
                            CriadoEm = new DateTime(2025, 6, 28, 17, 32, 53, 0, DateTimeKind.Utc),
                            Desativada = false,
                            Descricao = "Catarral - Esbranquiçado e mucoide, viscoso. Indicação: Presente em áreas mucosas ou com inflamação leve. Conduta: Raro em úlceras venosas, observar."
                        },
                        new
                        {
                            Id = new Guid("88888888-8888-8888-8888-888888888888"),
                            CriadoEm = new DateTime(2025, 6, 28, 17, 32, 53, 0, DateTimeKind.Utc),
                            Desativada = false,
                            Descricao = "Necrótico - Marrom, cinza ou preto, espesso, seco ou úmido. Indicação: Presença de necrose tecidual. Conduta: Desbridamento enzimático ou cirúrgico."
                        },
                        new
                        {
                            Id = new Guid("99999999-9999-9999-9999-999999999999"),
                            CriadoEm = new DateTime(2025, 6, 28, 17, 32, 53, 0, DateTimeKind.Utc),
                            Desativada = false,
                            Descricao = "Putrilaginoso - Cinza-esverdeado, muito espesso, pegajoso, fétido. Indicação: Infecção crítica, tecido desvitalizado. Conduta: Ação rápida: desbridamento + antibiótico."
                        },
                        new
                        {
                            Id = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            CriadoEm = new DateTime(2025, 6, 28, 17, 32, 53, 0, DateTimeKind.Utc),
                            Desativada = false,
                            Descricao = "Hiperexsudativo - Variável, muito abundante. Indicação: Descompensação venosa, linforreia, infecção. Conduta: Curativos superabsorventes, compressão."
                        });
                });

            modelBuilder.Entity("Cn2x.Iryo.UlceraVenosa.Domain.Entities.ExsudatoDaUlcera", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("AtualizadoEm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Desativada")
                        .HasColumnType("boolean");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<Guid>("ExsudatoId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UlceraId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ExsudatoId");

                    b.HasIndex("UlceraId");

                    b.ToTable("Exsudatos");
                });

            modelBuilder.Entity("Cn2x.Iryo.UlceraVenosa.Domain.Entities.ImagemUlcera", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("AtualizadoEm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CaminhoArquivo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataCaptura")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Desativada")
                        .HasColumnType("boolean");

                    b.Property<string>("Descricao")
                        .HasColumnType("text");

                    b.Property<bool>("EhImagemPrincipal")
                        .HasColumnType("boolean");

                    b.Property<string>("NomeArquivo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Observacoes")
                        .HasColumnType("text");

                    b.Property<int>("OrdemExibicao")
                        .HasColumnType("integer");

                    b.Property<long>("TamanhoBytes")
                        .HasColumnType("bigint");

                    b.Property<Guid>("UlceraId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UlceraId");

                    b.ToTable("ImagemUlcera");
                });

            modelBuilder.Entity("Cn2x.Iryo.UlceraVenosa.Domain.Entities.Paciente", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("AtualizadoEm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("character varying(14)");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Desativada")
                        .HasColumnType("boolean");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("Cpf")
                        .IsUnique();

                    b.ToTable("Pacientes");
                });

            modelBuilder.Entity("Cn2x.Iryo.UlceraVenosa.Domain.Entities.Patofisiologica", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("AtualizadoEm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Desativada")
                        .HasColumnType("boolean");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.ToTable("Fisiologicas");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            Codigo = "Pr",
                            CriadoEm = new DateTime(2025, 6, 28, 19, 0, 0, 0, DateTimeKind.Utc),
                            Desativada = false,
                            Descricao = "Refluxo"
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            Codigo = "Po",
                            CriadoEm = new DateTime(2025, 6, 28, 19, 0, 0, 0, DateTimeKind.Utc),
                            Desativada = false,
                            Descricao = "Obstrução"
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333333"),
                            Codigo = "Pro",
                            CriadoEm = new DateTime(2025, 6, 28, 19, 0, 0, 0, DateTimeKind.Utc),
                            Desativada = false,
                            Descricao = "Refluxo e obstrução"
                        },
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-444444444444"),
                            Codigo = "Pn",
                            CriadoEm = new DateTime(2025, 6, 28, 19, 0, 0, 0, DateTimeKind.Utc),
                            Desativada = false,
                            Descricao = "Sem alteração identificada"
                        });
                });

            modelBuilder.Entity("Cn2x.Iryo.UlceraVenosa.Domain.Entities.RegiaoAnatomica", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("AtualizadoEm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Desativada")
                        .HasColumnType("boolean");

                    b.Property<string>("Limites")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<Guid>("SegmentoId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SegmentoId");

                    b.ToTable("RegioesAnatomicas");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            CriadoEm = new DateTime(2025, 6, 28, 18, 30, 0, 0, DateTimeKind.Utc),
                            Desativada = false,
                            Limites = "Região maleolar - Ao redor do maléolo medial e lateral (tornozelo). Frequência: 10%",
                            SegmentoId = new Guid("11111111-1111-1111-1111-111111111111")
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            CriadoEm = new DateTime(2025, 6, 28, 18, 30, 0, 0, DateTimeKind.Utc),
                            Desativada = false,
                            Limites = "Terço inferior da perna - Entre a base do tornozelo e a metade da perna. Frequência: 73%",
                            SegmentoId = new Guid("22222222-2222-2222-2222-222222222222")
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333333"),
                            CriadoEm = new DateTime(2025, 6, 28, 18, 30, 0, 0, DateTimeKind.Utc),
                            Desativada = false,
                            Limites = "Terço médio/superior da perna - Da metade da perna até a fossa poplítea (abaixo do joelho). Frequência: 0%",
                            SegmentoId = new Guid("33333333-3333-3333-3333-333333333333")
                        },
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-444444444444"),
                            CriadoEm = new DateTime(2025, 6, 28, 18, 30, 0, 0, DateTimeKind.Utc),
                            Desativada = false,
                            Limites = "Maleolar + Terço inferior - Úlcera extensa envolvendo tornozelo e porção inferior da perna. Frequência: 15%",
                            SegmentoId = new Guid("11111111-1111-1111-1111-111111111111")
                        },
                        new
                        {
                            Id = new Guid("55555555-5555-5555-5555-555555555555"),
                            CriadoEm = new DateTime(2025, 6, 28, 18, 30, 0, 0, DateTimeKind.Utc),
                            Desativada = false,
                            Limites = "Terço inferior + Terço médio/superior - Lesões ascendentes ou disseminadas, raras em úlceras puramente venosas. Frequência: 2%",
                            SegmentoId = new Guid("22222222-2222-2222-2222-222222222222")
                        });
                });

            modelBuilder.Entity("Cn2x.Iryo.UlceraVenosa.Domain.Entities.Segmento", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("AtualizadoEm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Desativada")
                        .HasColumnType("boolean");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Segmentos");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            CriadoEm = new DateTime(2025, 6, 28, 18, 0, 0, 0, DateTimeKind.Utc),
                            Desativada = false,
                            Descricao = "Ao redor dos maléolos (interno e externo), especialmente o maleolo medial (tíbia). Local mais comum de úlcera venosa. Associada à hipertensão venosa crônica.",
                            Nome = "Região maleolar ou perimaleolar"
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            CriadoEm = new DateTime(2025, 6, 28, 18, 0, 0, 0, DateTimeKind.Utc),
                            Desativada = false,
                            Descricao = "Entre o maléolo e a metade da perna. Região de drenagem venosa crítica. Úlceras nesta zona indicam comprometimento venoso avançado.",
                            Nome = "Terço inferior da perna"
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333333"),
                            CriadoEm = new DateTime(2025, 6, 28, 18, 0, 0, 0, DateTimeKind.Utc),
                            Desativada = false,
                            Descricao = "Da metade até abaixo do joelho. Menos comum para úlceras venosas. Úlceras aqui sugerem causas mistas (venosa + arterial ou vasculite).",
                            Nome = "Terço médio e superior da perna"
                        });
                });

            modelBuilder.Entity("Cn2x.Iryo.UlceraVenosa.Domain.Entities.Topografia", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("AtualizadoEm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Desativada")
                        .HasColumnType("boolean");

                    b.Property<int>("Lado")
                        .HasColumnType("integer");

                    b.Property<Guid>("RegiaoId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UlceraId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RegiaoId");

                    b.HasIndex("UlceraId", "RegiaoId", "Lado")
                        .IsUnique();

                    b.ToTable("Topografias");
                });

            modelBuilder.Entity("Cn2x.Iryo.UlceraVenosa.Domain.Entities.Ulcera", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("AtualizadoEm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("AvaliacaoId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("ComprimentoCm")
                        .HasPrecision(5, 2)
                        .HasColumnType("numeric(5,2)");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataExame")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Desativada")
                        .HasColumnType("boolean");

                    b.Property<string>("Duracao")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal>("Largura")
                        .HasPrecision(5, 2)
                        .HasColumnType("numeric(5,2)");

                    b.Property<Guid>("PacienteId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Profundidade")
                        .HasPrecision(5, 2)
                        .HasColumnType("numeric(5,2)");

                    b.HasKey("Id");

                    b.HasIndex("AvaliacaoId");

                    b.HasIndex("PacienteId");

                    b.ToTable("Ulceras");
                });

            modelBuilder.Entity("Cn2x.Iryo.UlceraVenosa.Domain.Entities.Avaliacao", b =>
                {
                    b.HasOne("Cn2x.Iryo.UlceraVenosa.Domain.Entities.Paciente", "Paciente")
                        .WithMany("Avaliacoes")
                        .HasForeignKey("PacienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Paciente");
                });

            modelBuilder.Entity("Cn2x.Iryo.UlceraVenosa.Domain.Entities.ExsudatoDaUlcera", b =>
                {
                    b.HasOne("Cn2x.Iryo.UlceraVenosa.Domain.Entities.Exsudato", "Exsudato")
                        .WithMany("ExsudatosDaUlcera")
                        .HasForeignKey("ExsudatoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Cn2x.Iryo.UlceraVenosa.Domain.Entities.Ulcera", "Ulcera")
                        .WithMany("Exsudatos")
                        .HasForeignKey("UlceraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exsudato");

                    b.Navigation("Ulcera");
                });

            modelBuilder.Entity("Cn2x.Iryo.UlceraVenosa.Domain.Entities.ImagemUlcera", b =>
                {
                    b.HasOne("Cn2x.Iryo.UlceraVenosa.Domain.Entities.Ulcera", "Ulcera")
                        .WithMany("Imagens")
                        .HasForeignKey("UlceraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ulcera");
                });

            modelBuilder.Entity("Cn2x.Iryo.UlceraVenosa.Domain.Entities.RegiaoAnatomica", b =>
                {
                    b.HasOne("Cn2x.Iryo.UlceraVenosa.Domain.Entities.Segmento", "Segmento")
                        .WithMany("RegioesAnatomicas")
                        .HasForeignKey("SegmentoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Segmento");
                });

            modelBuilder.Entity("Cn2x.Iryo.UlceraVenosa.Domain.Entities.Topografia", b =>
                {
                    b.HasOne("Cn2x.Iryo.UlceraVenosa.Domain.Entities.RegiaoAnatomica", "Regiao")
                        .WithMany("Topografias")
                        .HasForeignKey("RegiaoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Cn2x.Iryo.UlceraVenosa.Domain.Entities.Ulcera", "Ulcera")
                        .WithMany("Topografias")
                        .HasForeignKey("UlceraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Regiao");

                    b.Navigation("Ulcera");
                });

            modelBuilder.Entity("Cn2x.Iryo.UlceraVenosa.Domain.Entities.Ulcera", b =>
                {
                    b.HasOne("Cn2x.Iryo.UlceraVenosa.Domain.Entities.Avaliacao", "Avaliacao")
                        .WithMany("Ulceras")
                        .HasForeignKey("AvaliacaoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cn2x.Iryo.UlceraVenosa.Domain.Entities.Paciente", "Paciente")
                        .WithMany("Ulceras")
                        .HasForeignKey("PacienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Cn2x.Iryo.UlceraVenosa.Domain.ValueObjects.Caracteristicas", "Caracteristicas", b1 =>
                        {
                            b1.Property<Guid>("UlceraId")
                                .HasColumnType("uuid");

                            b1.Property<bool>("BordasDefinidas")
                                .HasColumnType("boolean")
                                .HasColumnName("BordasDefinidas");

                            b1.Property<bool>("Necrose")
                                .HasColumnType("boolean")
                                .HasColumnName("Necrose");

                            b1.Property<bool>("OdorFetido")
                                .HasColumnType("boolean")
                                .HasColumnName("OdorFetido");

                            b1.Property<bool>("TecidoGranulacao")
                                .HasColumnType("boolean")
                                .HasColumnName("TecidoGranulacao");

                            b1.HasKey("UlceraId");

                            b1.ToTable("Ulceras");

                            b1.WithOwner()
                                .HasForeignKey("UlceraId");
                        });

                    b.OwnsOne("Cn2x.Iryo.UlceraVenosa.Domain.ValueObjects.Ceap", "ClassificacaoCeap", b1 =>
                        {
                            b1.Property<Guid>("UlceraId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("AnatomiaId")
                                .HasColumnType("uuid")
                                .HasColumnName("AnatomiaId");

                            b1.Property<Guid>("ClasseClinicaId")
                                .HasColumnType("uuid")
                                .HasColumnName("ClasseClinicaId");

                            b1.Property<Guid>("EtiologiaId")
                                .HasColumnType("uuid")
                                .HasColumnName("EtiologiaId");

                            b1.Property<Guid>("PatofisiologiaId")
                                .HasColumnType("uuid")
                                .HasColumnName("PatofisiologiaId");

                            b1.HasKey("UlceraId");

                            b1.ToTable("Ulceras");

                            b1.WithOwner()
                                .HasForeignKey("UlceraId");
                        });

                    b.OwnsOne("Cn2x.Iryo.UlceraVenosa.Domain.ValueObjects.SinaisInflamatorios", "SinaisInflamatorios", b1 =>
                        {
                            b1.Property<Guid>("UlceraId")
                                .HasColumnType("uuid");

                            b1.Property<bool>("Calor")
                                .HasColumnType("boolean")
                                .HasColumnName("Calor");

                            b1.Property<bool>("Dor")
                                .HasColumnType("boolean")
                                .HasColumnName("Dor");

                            b1.Property<bool>("Edema")
                                .HasColumnType("boolean")
                                .HasColumnName("Edema");

                            b1.Property<bool>("Eritema")
                                .HasColumnType("boolean")
                                .HasColumnName("Eritema");

                            b1.Property<bool>("PerdadeFuncao")
                                .HasColumnType("boolean")
                                .HasColumnName("PerdadeFuncao");

                            b1.Property<bool>("Rubor")
                                .HasColumnType("boolean")
                                .HasColumnName("Rubor");

                            b1.HasKey("UlceraId");

                            b1.ToTable("Ulceras");

                            b1.WithOwner()
                                .HasForeignKey("UlceraId");
                        });

                    b.Navigation("Avaliacao");

                    b.Navigation("Caracteristicas")
                        .IsRequired();

                    b.Navigation("ClassificacaoCeap")
                        .IsRequired();

                    b.Navigation("Paciente");

                    b.Navigation("SinaisInflamatorios")
                        .IsRequired();
                });

            modelBuilder.Entity("Cn2x.Iryo.UlceraVenosa.Domain.Entities.Avaliacao", b =>
                {
                    b.Navigation("Ulceras");
                });

            modelBuilder.Entity("Cn2x.Iryo.UlceraVenosa.Domain.Entities.Exsudato", b =>
                {
                    b.Navigation("ExsudatosDaUlcera");
                });

            modelBuilder.Entity("Cn2x.Iryo.UlceraVenosa.Domain.Entities.Paciente", b =>
                {
                    b.Navigation("Avaliacoes");

                    b.Navigation("Ulceras");
                });

            modelBuilder.Entity("Cn2x.Iryo.UlceraVenosa.Domain.Entities.RegiaoAnatomica", b =>
                {
                    b.Navigation("Topografias");
                });

            modelBuilder.Entity("Cn2x.Iryo.UlceraVenosa.Domain.Entities.Segmento", b =>
                {
                    b.Navigation("RegioesAnatomicas");
                });

            modelBuilder.Entity("Cn2x.Iryo.UlceraVenosa.Domain.Entities.Ulcera", b =>
                {
                    b.Navigation("Exsudatos");

                    b.Navigation("Imagens");

                    b.Navigation("Topografias");
                });
#pragma warning restore 612, 618
        }
    }
}
